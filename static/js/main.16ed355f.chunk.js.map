{"version":3,"sources":["components/rules.js","bull.jpg","components/home.js","components/navigation.js","components/play.js","App.js","index.js"],"names":["About","Container","className","href","target","rel","Home","src","bull","alt","to","Button","Navigation","Navbar","bg","variant","fixed","Toggle","Collapse","id","Nav","Play","letterFromNumber","number","String","fromCharCode","generateCode","min","max","code","i","CHARACTER_VARIANCE","Math","floor","random","useState","setCode","attempts","setAttempts","currentGuess","setCurrentGuess","gameEnd","setGameEnd","useEffect","length","guess","calculateHint","tempCode","split","tempGuess","bullCount","cowCount","includes","indexOf","pluralize","updateCurrentGuess","value","v","validInput","charAt","toUpperCase","DisplayAttempts","Table","size","map","attempt","hint","onClick","Form","onSubmit","e","preventDefault","currentAttempt","old","updateAttempts","InputGroup","Control","type","placeholder","onChange","disabled","required","App","exact","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.16ed355f.chunk.js","sourcesContent":["import Container from 'react-bootstrap/Container'\nimport React from 'react'\n\nconst About = () => (\n  <Container className=\"p-4\">\n    <p>Bulls and Cows is a code guessing game. A random code is generated every time you play. Enter your guess at the bottom, consisting of 4 letters from A - F, and get a hint back that follows the form below. You have a total of 10 guesses</p>\n    <h4>Bulls</h4>\n    <p>An individual letter is deemed a 'bull' if it exists in the code <b>and</b> it is in the correct location. For example, with a code of \"ABDDE\" and a guess of \"EBCCC\", the \"B\" in the guess is the correct letter in the correct location</p>\n    <h4>Cows</h4>\n    <p>An individual letter is deemed a 'cow' if it exists in the code but <b>not</b> in the correct location. In the above example, the letter \"E\" would be a Cow because it is in the code, but <i>not</i> in the correct location</p>\n    <a href=\"https://en.wikipedia.org/wiki/Bulls_and_Cows\" target=\"_blank\" rel=\"noreferrer\">Read more on wikipedia</a>\n  </Container>\n)\n\nexport default About\n","export default __webpack_public_path__ + \"static/media/bull.3e00f196.jpg\";","import React from 'react'\nimport bull from '../bull.jpg'\nimport { LinkContainer } from 'react-router-bootstrap'\nimport Button from 'react-bootstrap/Button'\n\nconst Home = () => (\n  <div>\n    <img src={bull} className=\"bull-photo\" alt=\"logo\" />\n    <p>\n      Welcome to Bulls and Cows (also known as <b><i>Master Mind</i></b>)\n    </p>\n    <LinkContainer to=\"/play\">\n      <Button>\n        Click here to begin!\n      </Button>\n    </LinkContainer>\n  </div>\n)\n\nexport default Home\n","import React from 'react'\nimport Container from 'react-bootstrap/Container'\nimport Navbar from 'react-bootstrap/Navbar'\nimport Nav from 'react-bootstrap/Nav'\nimport { Link } from 'react-router-dom'\n\nconst Navigation = () => (\n  <Navbar bg=\"dark\" variant=\"dark\" fixed=\"top\">\n    <Container>\n      <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n      <Navbar.Collapse id=\"responsive-navbar-nav\">\n        <Nav>\n          <Link to=\"/\" className=\"nav-link\">Home</Link>\n          <Link to=\"/rules\" className=\"nav-link\">Rules</Link>\n          <Link to=\"/play\" className=\"nav-link\">Play</Link>\n        </Nav>\n      </Navbar.Collapse>\n    </Container>\n  </Navbar>\n)\n\nexport default Navigation\n","import Button from 'react-bootstrap/Button'\nimport Container from 'react-bootstrap/Container'\nimport Form from 'react-bootstrap/Form'\nimport InputGroup from 'react-bootstrap/InputGroup'\nimport React, { useEffect, useState } from 'react'\nimport Table from 'react-bootstrap/Table'\nimport pluralize from 'pluralize'\nimport { LinkContainer } from 'react-router-bootstrap'\n\nconst Play = () => {\n  const MAX_NUMBER_OF_TRIES = 10\n  const CHARACTER_VARIANCE = 6\n\n  const randomIntFromInterval = (min, max) => Math.floor(Math.random() * (max - min + 1) + min)\n  const letterFromNumber = (number) => String.fromCharCode(65 + number)\n  const validInput = () => {\n    let v = \"\"\n    for (let i = 0; i < CHARACTER_VARIANCE; i++) {\n      v += letterFromNumber(i)\n    }\n    return v\n  }\n\n  const generateCode = () => {\n    let code = \"\"\n    for (let i = 0; i < 4; i++) {\n      code += letterFromNumber(randomIntFromInterval(1, CHARACTER_VARIANCE - 1))\n    }\n    return code\n  };\n\n  const [code, setCode] = useState(generateCode())\n  const [attempts, setAttempts] = useState([])\n  const [currentGuess, setCurrentGuess] = useState('')\n  const [gameEnd, setGameEnd] = useState(null)\n\n  const reset = () => {\n    setAttempts([])\n    setCurrentGuess('')\n    setGameEnd(null)\n    setCode(generateCode())\n  }\n\n  useEffect(() => {\n    if (attempts.length >= MAX_NUMBER_OF_TRIES && !gameEnd) {\n      setGameEnd(\"You lost :(\")\n    } else if (attempts.length > 0 && attempts[attempts.length - 1].guess === code) {\n      setGameEnd(\"You won :)\")\n    }\n  }, [gameEnd, attempts, code])\n\n  const calculateHint = (guess) => {\n    let tempCode = code.split('')\n    let tempGuess = guess.split('')\n    let bullCount = 0\n    let cowCount = 0\n\n    for (let i = 0; i < tempGuess.length; i++) {\n      if (tempGuess[i] === tempCode[i]) {\n        bullCount ++\n        tempCode[i] = null\n        tempGuess[i] = null\n      }\n    }\n\n    for (let i = 0; i < tempGuess.length; i++) {\n      if (!!tempGuess[i] && tempCode.includes(tempGuess[i])) {\n        cowCount++\n        tempCode[tempCode.indexOf(tempGuess[i])] = null\n      }\n    }\n\n    return `${pluralize(\"Bull\", bullCount, true)}, ${pluralize(\"Cow\", cowCount, true)}`\n  }\n\n  const updateAttempts = (guess) => {\n    const currentAttempt = {\n      guess: guess,\n      hint: calculateHint(guess),\n    }\n    setAttempts(old => [...old, currentAttempt])\n  }\n\n  const updateCurrentGuess = (value) => {\n    if (validInput().includes(value.charAt(value.length-1).toUpperCase()) && value.length <= 4) {\n      setCurrentGuess(value.toUpperCase())\n    }\n  }\n\n  const onSubmit = e => {\n    e.preventDefault()\n    updateAttempts(currentGuess)\n    setCurrentGuess('')\n  }\n\n  const DisplayAttempts = () => (\n    <Table size=\"sm\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>Attempt</th>\n          <th>Hint</th>\n        </tr>\n      </thead>\n      <tbody>\n        {attempts.map((attempt, i) =>\n          <tr key={i}>\n            <td>{i + 1}</td>\n            <td>{attempt.guess}</td>\n            <td>{attempt.hint}</td>\n          </tr>\n        )}\n      </tbody>\n    </Table>\n  )\n\n  return (\n    <Container>\n      <div className=\"p-5 pb-0 d-flex justify-content-between\">\n        <Button variant=\"warning\" onClick={reset}>Restart</Button>\n        {!!gameEnd ? <span>{code}</span> : <span>Good luck!</span> }\n        <LinkContainer to=\"/\">\n          <Button variant=\"danger\">Quit</Button>\n        </LinkContainer>\n      </div>\n\n      <hr />\n\n      {attempts.length > 0 && <DisplayAttempts />}\n      {gameEnd && <h1>{gameEnd}</h1>}\n\n      <Form id='input-box' className=\"p-5\" onSubmit={onSubmit}>\n        <InputGroup>\n          <Form.Control\n            type=\"text\"\n            placeholder={`Enter 4 letters from A to ${letterFromNumber(CHARACTER_VARIANCE - 1).toUpperCase()}`}\n            value={currentGuess}\n            onChange={e => updateCurrentGuess(e.target.value)}\n            disabled={!!gameEnd}\n            required\n          />\n          <Button\n            type=\"submit\"\n            disabled={!!gameEnd || currentGuess.length > 4 || currentGuess.length < 4}\n          >\n            Submit\n          </Button>\n        </InputGroup>\n      </Form>\n    </Container>\n  )\n}\n\nexport default Play\n","import './App.css'\nimport Rules from './components/rules'\nimport Home from './components/home'\nimport Navigation from './components/navigation'\nimport Play from './components/play'\nimport React from 'react'\nimport { Switch, Route } from 'react-router-dom'\n\nconst App = () => (\n  <div className=\"App\">\n    <Navigation />\n    <div className=\"component\">\n      <Switch>\n        <Route exact path=\"/\">\n          <Home />\n        </Route>\n        <Route path=\"/play\">\n          <Play />\n        </Route>\n        <Route path=\"/rules\">\n          <Rules />\n        </Route>\n      </Switch>\n    </div>\n  </div>\n)\n\nexport default App\n","import 'bootstrap/dist/css/bootstrap.css'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { MemoryRouter as Router } from 'react-router-dom'\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}